package memdraw

import (
	"fmt"
	"image"
	"image/color"
	"image/draw"
	"image/png"
	"math/rand"
	"os"
	"testing"
)

type X struct {
	p0, p1 image.Point
	r      image.Rectangle
	want   bool
}

func (x *X) eval(t *testing.T, i int) {
	t.Helper()
	if have := lineOverRect(x.r, x.p0, x.p1); have != x.want {
		dst := image.NewRGBA(x.r.Inset(-100))
		draw.Draw(dst, x.r, image.NewUniform(color.RGBA{255, 0, 0, 255}), image.ZP, draw.Src)
		Line(dst, x.p0, x.p1, 1, image.White, image.ZP)
		fd, _ := os.Create("bad.png")
		png.Encode(fd, dst)
		fd.Close()
		t.Fatalf("%d: %s->%s in %s: have %v, want %v", i, x.p0, x.p1, x.r, have, x.want)
	}
}
func (x *X) warn(t *testing.T, i int) {
	t.Helper()
	if have := lineOverRect(x.r, x.p0, x.p1); have != x.want {
		t.Logf("%d: %s->%s in %s: have %v, want %v", i, x.p0, x.p1, x.r, have, x.want)
	}
}

func genrand() {
	p := image.Pt
	r := image.Rect
	v := func() int {
		return int(rand.Int31n(2) - 1)
	}
	for i := 0; i < 100; i++ {
		x, y, xx, yy, a, b, c, d := v(), v(), v(), v(), v(), v(), v(), v()
		r := r(x, y, xx, yy)
		p0, p1 := p(a, b), p(c, d)
		and := sig(r, p0) & sig(r, p1)
		fmt.Printf("{p%s,p%s, R{p%s, p%s}, %v},\n", p0, p1, r.Min, r.Max, and != 0)
	}
}
func TestLineInRect(t *testing.T) {
	p := image.Pt
	type R = image.Rectangle

	for name, tab := range map[string][]X{
		"zrect": {
			{p(0, 0), p(0, 0), image.ZR, false},
			{p(0, 0), p(1, 1), image.ZR, false},
			{p(1, 1), p(0, 0), image.ZR, false},
			{p(5, 5), p(6, 6), image.ZR, false},
			{p(-1, -1), p(1, 1), image.ZR, false},
		},
		"zline": {
			{p(0, 0), p(5, 5), image.ZR, false},
			{p(1, 1), p(1, 1), image.ZR, false},
			{p(5, 5), p(5, 5), image.ZR, false},
		},
		"edge": {
			{p(9, 9), p(10, 10), R{p(5, 5), p(9, 9)}, false},
			{p(0, 0), p(5, 5), R{p(5, 5), p(9, 9)}, true},
		},
		"rand": {
			{p(4, 9), p(9, 4), R{p(0, 0), p(5, 5)}, false},
			{p(-9, 8), p(-5, -10), R{p(-9, -3), p(-3, 9)}, true},
			{p(-8, -1), p(-2, 4), R{p(4, -10), p(6, 1)}, true},
			{p(5, -4), p(-2, 8), R{p(1, -5), p(7, -4)}, false},
			{p(0, 5), p(-9, -2), R{p(-3, -3), p(-3, -2)}, false},
			{p(7, 1), p(-5, -4), R{p(-3, 1), p(-1, 6)}, true},
			{p(3, -3), p(8, -6), R{p(3, -7), p(4, 0)}, true},
			{p(-1, 9), p(-10, -5), R{p(7, -9), p(9, 3)}, true},
			{p(1, 0), p(-5, 6), R{p(-7, 5), p(-2, 8)}, true},
			{p(-7, -4), p(-7, 6), R{p(-9, -8), p(-4, -2)}, false},
			{p(7, -7), p(6, -10), R{p(-8, 4), p(-3, 8)}, true},
			{p(-9, 9), p(3, -7), R{p(-7, 3), p(7, 3)}, false},
			{p(-4, -3), p(-10, -7), R{p(1, -8), p(8, 6)}, true},
			{p(-5, 1), p(5, 7), R{p(-5, -7), p(2, 8)}, true},
			{p(0, 2), p(8, 3), R{p(-3, -5), p(0, 0)}, false},
			{p(-3, 7), p(1, 4), R{p(-6, -8), p(1, 7)}, false},
			{p(-4, 0), p(3, -4), R{p(-9, -8), p(-4, 9)}, true},
			{p(-5, 0), p(-3, -1), R{p(2, -9), p(9, 5)}, true},
			{p(-6, -3), p(2, 2), R{p(-6, -7), p(-2, 8)}, true},
			{p(1, 6), p(-10, 1), R{p(-10, -4), p(6, 9)}, true},
			{p(-9, 0), p(-8, 8), R{p(-6, -7), p(-5, -6)}, true},
			{p(-8, -7), p(-8, -2), R{p(-3, 1), p(8, 4)}, true},
			{p(5, -10), p(-6, -8), R{p(-7, -2), p(-4, 0)}, true},
			{p(0, 3), p(-10, 9), R{p(1, 5), p(7, 9)}, true},
			{p(-3, 0), p(-5, -8), R{p(-10, -7), p(0, -6)}, false},
			{p(5, -4), p(-10, 6), R{p(-2, -10), p(-1, 6)}, false},
			{p(-4, -10), p(9, -8), R{p(-1, 2), p(1, 7)}, true},
			{p(-7, -2), p(8, 6), R{p(-3, 1), p(-2, 2)}, false},
			{p(5, -9), p(3, 5), R{p(7, -3), p(9, 2)}, true},
			{p(-4, 2), p(-10, -10), R{p(0, 3), p(7, 6)}, true},
			{p(-10, 9), p(4, -6), R{p(-9, -10), p(-8, -1)}, false},
			{p(6, -10), p(9, 7), R{p(-10, 1), p(-9, 7)}, true},
			{p(-1, 5), p(9, 4), R{p(-6, -9), p(3, -5)}, true},
			{p(-6, 3), p(5, -7), R{p(-10, -10), p(-10, -8)}, true},
			{p(0, 6), p(8, 2), R{p(-9, -1), p(4, 0)}, true},
			{p(-6, 3), p(-4, -2), R{p(-6, 5), p(4, 7)}, true},
			{p(7, 1), p(-5, -8), R{p(-8, -10), p(2, 1)}, false},
			{p(-9, 5), p(1, -7), R{p(-1, 1), p(9, 2)}, false},
			{p(-2, -2), p(-2, 3), R{p(3, -4), p(9, -3)}, true},
			{p(-4, 7), p(-4, -3), R{p(4, -6), p(5, 4)}, true},
			{p(-7, -6), p(-3, 7), R{p(4, -4), p(9, 8)}, true},
			{p(-7, -2), p(6, -4), R{p(1, -4), p(4, 9)}, true},
			{p(-5, -8), p(-1, 8), R{p(6, 1), p(7, 2)}, true},
			{p(9, -9), p(-8, 8), R{p(-3, -2), p(-1, 0)}, false},
			{p(-10, -9), p(-5, 6), R{p(-5, -10), p(3, 1)}, false},
			{p(-10, 4), p(7, -3), R{p(-1, -4), p(6, 5)}, true},
			{p(-2, 1), p(-5, 8), R{p(3, -10), p(8, 5)}, true},
			{p(3, 2), p(3, 8), R{p(-7, -8), p(-6, -8)}, true},
			{p(1, 4), p(-4, -10), R{p(-3, 3), p(-2, 6)}, true},
			{p(4, -7), p(0, -4), R{p(1, -8), p(7, 2)}, true},
			{p(3, 8), p(6, -5), R{p(-6, -9), p(-3, -8)}, true},
			{p(9, -6), p(-10, -6), R{p(-8, -5), p(4, -4)}, true},
			{p(3, 4), p(5, -10), R{p(-6, -3), p(9, 7)}, true},
			{p(-9, 1), p(1, -5), R{p(-5, 4), p(-1, 9)}, true},
			{p(2, 5), p(7, -8), R{p(-1, -7), p(5, 2)}, false},
			{p(-10, -5), p(-4, 4), R{p(3, -3), p(9, 7)}, true},
			{p(3, 4), p(0, 0), R{p(-6, -8), p(4, -7)}, true},
			{p(-1, 7), p(-5, 1), R{p(-7, 0), p(5, 4)}, false},
			{p(4, -9), p(-3, -4), R{p(-2, 8), p(4, 9)}, true},
			{p(-1, -2), p(-10, 4), R{p(-3, -9), p(0, -9)}, true},
			{p(-4, 5), p(0, 2), R{p(-9, -10), p(3, 6)}, true},
			{p(-4, -9), p(-6, -7), R{p(3, -5), p(9, 4)}, true},
			{p(-5, -4), p(9, -10), R{p(-2, -7), p(6, -3)}, true},
			{p(1, 4), p(9, -4), R{p(4, -10), p(6, 0)}, false},
			{p(9, 4), p(-9, 4), R{p(-9, -8), p(3, -5)}, true},
			{p(-6, -10), p(6, 9), R{p(-9, -2), p(-5, 0)}, false},
			{p(-8, -9), p(5, 7), R{p(-8, 6), p(3, 6)}, false},
			{p(9, 5), p(3, -10), R{p(-7, 2), p(8, 7)}, true},
			{p(7, -3), p(-1, 2), R{p(-3, -2), p(2, 4)}, true},
			{p(4, -1), p(-7, -8), R{p(-6, -1), p(-4, 6)}, true},
			{p(3, -10), p(4, -5), R{p(-6, 9), p(0, 9)}, true},
			{p(7, -6), p(-8, -7), R{p(-9, -2), p(-9, 3)}, true},
			{p(2, -8), p(1, 8), R{p(-9, -10), p(5, 0)}, false},
			{p(6, 2), p(-7, 5), R{p(-9, -3), p(2, 5)}, false},
			{p(0, 7), p(-8, 4), R{p(-1, -10), p(4, 8)}, true},
			{p(-4, 6), p(-5, -2), R{p(-2, -8), p(0, 6)}, true},
			{p(3, -1), p(3, 0), R{p(-8, -9), p(1, -7)}, true},
			{p(8, -5), p(-9, 8), R{p(-9, -4), p(7, 0)}, false},
			{p(-9, -2), p(6, 7), R{p(5, 2), p(8, 5)}, false},
			{p(-9, -10), p(2, -6), R{p(3, 1), p(4, 9)}, true},
			{p(-2, 0), p(-10, 2), R{p(-7, 5), p(4, 8)}, true},
		},
		"randlarge": {
			{p(-419, -182), p(-75, 40), R{p(-419, -441), p(347, 387)}, true},
			{p(-338, -411), p(228, -226), R{p(-44, -200), p(194, 11)}, true},
			{p(-5, -34), p(28, -242), R{p(-289, -394), p(-263, -55)}, true},
			{p(-259, -441), p(-467, 143), R{p(-363, -367), p(123, 453)}, true},
			{p(46, -393), p(440, 3), R{p(378, -498), p(391, -164)}, false},
			{p(-75, -149), p(15, 257), R{p(-295, 98), p(52, 343)}, true},
			{p(90, 132), p(-402, 53), R{p(-90, -490), p(187, -215)}, false},
			{p(-233, -363), p(-229, 394), R{p(-116, -203), p(91, 82)}, true},
			{p(-434, -230), p(-7, -414), R{p(226, -421), p(481, 302)}, true},
			{p(385, 210), p(-113, 249), R{p(-448, -325), p(319, 481)}, true},
			{p(-276, 47), p(112, 32), R{p(-116, 318), p(28, 403)}, true},
			{p(-449, -424), p(140, -149), R{p(40, 286), p(116, 339)}, true},
			{p(301, -410), p(102, -242), R{p(-195, -317), p(344, -136)}, true},
			{p(322, -277), p(-158, -292), R{p(78, -346), p(267, -269)}, true},
			{p(35, -60), p(404, -338), R{p(-334, 210), p(243, 468)}, true},
			{p(-80, -421), p(454, -36), R{p(161, -471), p(422, -440)}, false},
			{p(16, 100), p(-461, 137), R{p(-440, 51), p(-319, 257)}, true},
			{p(9, -285), p(219, -486), R{p(33, 61), p(304, 185)}, true},
			{p(-216, -327), p(-265, -57), R{p(-460, -500), p(240, 162)}, true},
			{p(-430, -164), p(-162, -28), R{p(-79, -110), p(74, 369)}, true},
			{p(-92, -492), p(28, 153), R{p(-447, -334), p(359, 367)}, true},
			{p(-394, 37), p(-214, -33), R{p(-125, -216), p(274, 374)}, true},
			{p(-395, 262), p(289, 198), R{p(-464, -449), p(-23, -88)}, false},
			{p(-341, 361), p(102, -82), R{p(-91, -372), p(387, -70)}, false},
			{p(-380, -419), p(-95, -224), R{p(-155, -260), p(153, 371)}, true},
			{p(80, 334), p(-23, -233), R{p(9, -34), p(56, 195)}, false},
			{p(308, 131), p(-235, 58), R{p(-22, -325), p(493, -120)}, false},
			{p(173, 472), p(-247, -342), R{p(-477, -338), p(384, -58)}, false},
			{p(231, 74), p(-194, 240), R{p(-452, -4), p(27, 13)}, true},
			{p(353, 274), p(-25, 240), R{p(-376, -493), p(259, -143)}, true},
			{p(81, -369), p(-449, 485), R{p(-411, -161), p(45, 314)}, false},
			{p(-128, -225), p(-123, -238), R{p(129, -408), p(195, -297)}, true},
			{p(280, -295), p(-94, -26), R{p(259, -483), p(473, 307)}, true},
			{p(-467, 74), p(110, -470), R{p(44, 223), p(394, 422)}, true},
			{p(-178, -199), p(55, -223), R{p(82, -184), p(313, 16)}, true},
			{p(-321, 375), p(-167, 240), R{p(258, -283), p(463, -268)}, true},
			{p(453, -140), p(394, 485), R{p(230, -161), p(264, 119)}, true},
			{p(257, -316), p(-238, -217), R{p(-99, -287), p(221, -172)}, true},
			{p(90, -83), p(382, -86), R{p(194, -402), p(269, 240)}, true},
			{p(406, -17), p(-372, -299), R{p(-140, 336), p(336, 455)}, true},
			{p(287, 32), p(23, 223), R{p(63, -357), p(112, 279)}, true},
			{p(1, 347), p(308, -93), R{p(-223, -310), p(325, 301)}, false},
			{p(-136, 88), p(-263, 300), R{p(-404, -348), p(159, -86)}, false},
			{p(-356, -422), p(108, 227), R{p(-308, -362), p(-105, -303)}, false},
			{p(102, 64), p(420, -211), R{p(-359, -428), p(489, 415)}, true},
			{p(379, 387), p(315, -115), R{p(-200, -440), p(3, 304)}, true},
		},
		"randhuge": {
			{p(32674, -8207), p(-24232, 5402), R{p(-826, -14428), p(-184, -9553)}, false},
			{p(-30961, -30502), p(21096, -24942), R{p(-16603, -9067), p(-2421, 3042)}, true},
			{p(-13258, -26633), p(2869, -4232), R{p(-12241, -13064), p(17535, 19755)}, true},
			{p(12329, -15369), p(-15619, -13422), R{p(-26149, -1265), p(14245, 2380)}, true},
			{p(23025, -17517), p(-31778, -17692), R{p(5773, -23741), p(25546, 17042)}, true},
			{p(-3595, -7017), p(7336, -8687), R{p(-32385, 9305), p(8981, 17993)}, true},
			{p(771, 26654), p(30909, -18020), R{p(30567, 4858), p(31432, 30635)}, true},
			{p(3743, -29406), p(3659, -14616), R{p(-27286, -20350), p(8681, -6236)}, true},
			{p(-32311, 28167), p(-1924, -17228), R{p(234, -6106), p(16743, 9974)}, true},
			{p(-11383, -29653), p(4585, -14445), R{p(-21247, -26723), p(21279, 21369)}, true},
			{p(-19582, -25101), p(11812, -11001), R{p(-10749, -26536), p(4030, 9394)}, true},
			{p(-18879, -25305), p(-18725, -5635), R{p(1368, -3933), p(8589, -2690)}, true},
			{p(11006, -23440), p(-22646, -8407), R{p(19271, -267), p(22066, 28538)}, true},
			{p(12227, -21511), p(-19881, 12406), R{p(-22232, -7418), p(-15169, 8705)}, false},
			{p(29282, 31958), p(31837, -9522), R{p(-16834, -17942), p(10253, -16465)}, true},
			{p(22069, 27022), p(-32517, 32693), R{p(-26533, -27483), p(12324, 7159)}, false},
			{p(7000, 25187), p(-7572, 16316), R{p(5816, 13775), p(18464, 18994)}, false},
			{p(-23573, -1988), p(9160, 29767), R{p(3648, -23601), p(26540, 922)}, false},
			{p(-655, -29574), p(-6494, 32354), R{p(28145, -17444), p(32188, 10767)}, true},
			{p(28942, 6855), p(6718, 15632), R{p(7287, 8447), p(22282, 21050)}, true},
			{p(10887, 21800), p(-29448, 21066), R{p(-12658, -6962), p(-3841, 4160)}, true},
			{p(-14458, -6935), p(-14700, -29329), R{p(20193, -24657), p(30075, 3775)}, true},
			{p(-11369, -12454), p(-29003, 25938), R{p(-16464, -13224), p(950, 21903)}, false},
			{p(-24401, -2742), p(-9528, -9536), R{p(-13411, -30604), p(3136, -14736)}, false},
			{p(31342, -32536), p(-22201, -19846), R{p(16373, -22775), p(26991, 676)}, true},
			{p(23951, -14400), p(23310, 12716), R{p(-3536, -23468), p(7799, 11011)}, true},
			{p(22739, 23845), p(-8771, -26837), R{p(-18611, -8529), p(-253, 17884)}, false},
			{p(31370, 18952), p(7096, -16284), R{p(8753, -15567), p(26630, 24884)}, true},
			{p(16772, -9593), p(25466, -2488), R{p(-5598, 2476), p(31965, 23029)}, true},
			{p(28892, -30456), p(-753, -10467), R{p(-8564, -15697), p(20925, 11885)}, true},
			{p(6949, 15471), p(27207, 20566), R{p(-32572, -26423), p(23805, -4179)}, false},
			{p(16212, 10997), p(-14181, 20059), R{p(2080, -25280), p(19708, 25158)}, true},
			{p(1510, -20000), p(1194, 32096), R{p(28389, 11893), p(29534, 20038)}, true},
			{p(-2860, -25395), p(9510, -16048), R{p(-2616, 10219), p(13614, 14565)}, true},
			{p(3925, 1543), p(12961, -31974), R{p(-23346, -19485), p(-6744, -16100)}, true},
			{p(6225, 15095), p(-30433, 17887), R{p(625, -10864), p(27959, 14791)}, false},
			{p(-18232, -15632), p(16904, -3547), R{p(-10483, -5637), p(-6733, 30718)}, true},
			{p(31994, 24521), p(5374, 24931), R{p(-21530, -414), p(24359, 2124)}, true},
			{p(-19061, 23492), p(-7677, 30057), R{p(-22814, 4418), p(7427, 11130)}, true},
			{p(20279, 10256), p(24652, -12194), R{p(-25805, -14841), p(-8594, 12354)}, true},
			{p(-23871, -13886), p(-16043, 18442), R{p(-28987, -32412), p(-20436, -26205)}, true},
			{p(-29209, 14797), p(29882, 17642), R{p(-28793, -19160), p(19625, -18410)}, true},
			{p(-10600, 9801), p(-13499, 15308), R{p(-15067, -31297), p(5065, 14592)}, false},
			{p(2228, 9346), p(30109, 17083), R{p(-9140, -28305), p(24549, 23258)}, true},
			{p(3904, 17911), p(-23783, -18898), R{p(-10906, -20321), p(24929, 9796)}, false},
			{p(-8375, 10028), p(26261, 10838), R{p(-21153, -26950), p(15892, 28394)}, true},
			{p(-15085, -30418), p(1866, -16292), R{p(3208, -10432), p(10967, 6825)}, true},
			{p(-29530, 17387), p(-31414, 5390), R{p(-31981, -12390), p(22549, 9932)}, false},
			{p(9425, 7278), p(7836, -28627), R{p(-30565, -8810), p(-18372, -5715)}, true},
			{p(-313, 29208), p(12476, -23844), R{p(3278, -3034), p(24762, 12797)}, false},
			{p(19989, -3746), p(31979, 12492), R{p(-24561, -24153), p(25812, -19283)}, true},
			{p(-11043, -8453), p(18507, -871), R{p(19569, -24250), p(31161, 16355)}, true},
			{p(1188, -19317), p(-27303, 29838), R{p(-18881, -25509), p(-18051, 18404)}, false},
			{p(17796, 9997), p(-24402, -18998), R{p(17789, -8705), p(24799, -7287)}, false},
			{p(-8911, 4086), p(11506, -6018), R{p(6798, -18533), p(24488, 24050)}, true},
			{p(-15635, 27341), p(18925, 16543), R{p(4075, -2334), p(13587, 3034)}, true},
			{p(-10374, -2655), p(20099, 13646), R{p(-12642, -25729), p(1592, 21702)}, true},
			{p(-21695, 29984), p(5392, -4698), R{p(-31526, -11979), p(-16157, -3071)}, false},
			{p(-16086, -24965), p(-8882, -24808), R{p(-23279, 2428), p(3445, 17244)}, true},
			{p(-17402, 11969), p(-20124, 3335), R{p(8903, -29266), p(28713, 16069)}, true},
			{p(-8747, -31278), p(22755, -31664), R{p(29616, -29417), p(29900, 9871)}, true},
			{p(29603, -838), p(-5253, -2526), R{p(10568, -22780), p(21098, -9574)}, false},
			{p(6543, -15778), p(12597, -26738), R{p(-18479, -15318), p(20861, 21781)}, true},
			{p(-22544, 19728), p(-31208, -32553), R{p(-25859, 16792), p(4669, 18470)}, false},
			{p(-12230, -21939), p(-6669, 20717), R{p(-483, -804), p(18974, 11092)}, true},
			{p(-677, 3827), p(4581, 11564), R{p(-7973, -13287), p(4166, 21240)}, true},
			{p(-11187, -20697), p(-14991, -23208), R{p(-12416, -1528), p(30027, 28854)}, true},
			{p(22154, 2485), p(11079, 19562), R{p(-15576, -1764), p(28586, 28545)}, true},
			{p(-11327, -1600), p(-28562, 2897), R{p(-19580, -27613), p(-12814, 5659)}, true},
			{p(-22579, -20232), p(-17658, -9365), R{p(-31975, -27979), p(27385, -9600)}, false},
			{p(21532, -4682), p(-17985, -18966), R{p(-22237, 11140), p(-19151, 17398)}, true},
			{p(24452, -9212), p(-28965, -24501), R{p(-11304, -27569), p(6489, -14949)}, false},
			{p(21206, 25833), p(8490, 30230), R{p(6574, -25358), p(9329, 3044)}, false},
			{p(30118, 388), p(-17799, -5432), R{p(-28606, 6652), p(15884, 10142)}, true},
			{p(-13015, -4899), p(-30539, 17270), R{p(-31565, -14983), p(-8150, 16675)}, false},
			{p(-31058, 22817), p(3193, -3070), R{p(-17199, -11734), p(-7655, -8882)}, true},
			{p(-26383, -2064), p(-17564, 16849), R{p(-29554, -28528), p(-8081, -15161)}, false},
			{p(-26039, -9444), p(17172, 14876), R{p(-26526, -24821), p(-6467, -7333)}, false},
			{p(15932, -25994), p(-19088, -17164), R{p(-617, -21097), p(4070, 9622)}, true},
			{p(-9550, 8774), p(29375, -734), R{p(-1993, -2630), p(12606, 23944)}, true},
			{p(22077, -14094), p(-15342, 2249), R{p(-4887, -6534), p(-1404, 3746)}, true},
			{p(13361, 10574), p(-24068, -32749), R{p(-4843, -13814), p(25781, 9768)}, false},
			{p(-11828, 7566), p(22027, 13318), R{p(-22519, -32766), p(-10943, 15167)}, true},
			{p(328, -29422), p(-18176, -20057), R{p(-2095, -25746), p(25216, 675)}, true},
			{p(-23883, -14703), p(11795, 20490), R{p(2509, 24951), p(18898, 26269)}, true},
			{p(19471, 26311), p(9871, -25009), R{p(-18205, -24582), p(1093, -22853)}, true},
			{p(26071, -19768), p(2450, 6833), R{p(-24244, -5695), p(-19277, 18748)}, true},
			{p(-1241, 31840), p(-28406, 27637), R{p(-6862, -26847), p(22791, -6389)}, true},
			{p(-32158, 1211), p(28448, 29105), R{p(-23228, -14964), p(13968, 13787)}, false},
			{p(8923, -2748), p(6979, -30677), R{p(-21029, -16465), p(19332, 24123)}, true},
			{p(-26539, -11305), p(20592, 26335), R{p(-27531, -20922), p(31369, -16127)}, true},
			{p(-17724, -21444), p(29909, -21560), R{p(-28680, -26856), p(18931, 13566)}, true},
			{p(9664, 9110), p(24120, 27535), R{p(-18472, -22323), p(-16565, 27954)}, true},
			{p(-18687, 24526), p(8968, -20704), R{p(-15641, 18099), p(4424, 22486)}, false},
			{p(13066, 17527), p(-31692, -2726), R{p(14119, -3807), p(18660, 25277)}, true},
			{p(16843, 3554), p(-17973, 23674), R{p(-21291, 6742), p(9552, 10612)}, false},
			{p(-26286, 9863), p(-27480, 22), R{p(-31133, -1020), p(-17949, 1631)}, false},
			{p(-22910, -4476), p(23168, -14903), R{p(-18627, -28552), p(-10523, 22979)}, true},
		},
	} {
		t.Run(name, func(t *testing.T) {
			for i, tc := range tab {
				tc.eval(t, i)
			}
		})
	}

}
